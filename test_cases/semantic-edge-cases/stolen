{
    int a 
    boolean b
    {
        string c
        a = 5
        b = true /* no comment */
        c = "inta"
        print(c)
    }
    print(b)
    print(a)
}$
{
    int a
    {
        boolean b
        a = 1
    }
    /*
       this should NOT count as b from the inner scope being used
       because that b is not accesible!!!!
    */
    print(b)
}$
{
    int a
    {
        boolean b
        {
            string c
            {
                a = 5
                b = false
                c = "inta"
            }
            print(c)
        }
        print(b)
    }
    print(a)
}$
{
    int a
    a = 9
    int b
    b = 4
    if (a ==2+3+b){
        print("yes")
    }
    print(b)
    print(2+3)
    print(2+3+b)
    print(a)
}$
{
    {
        x = 1 + 2 + 3
          y = 6 + 7
          p = 1 
          o = 9 + 8 
          w = 4 + 5 + 0
      }
      
    a = 1
    b = 1 + 2
      c = 3 + 4 + 5
      d = 5 + 6 + 7
      e = 7 + 8
      f = 9
      
      {
        z = 1 + 2 + 3 + 4 + 5 + 6 + 7 + 9
      }
}$

/* Obviously missing varible decalarations, but still a good test for your tree */
  {
    {
        x = "abc"
          y = "e"
          p = "fghijklm" 
          o = "nop" 
          w = "qrstuvwxyz"
      }
      
    a = "qrstuvwxyz"
    b = "nop" 
      c = "e"
      d = "fghijklm"
      e = "abc"
      f = "z"
      {
        z = "abcdefghijklmnopqrstuvwxyz"
      }
  }$
/* Semantically incorrect, but make sure your AST structure is correct */
  {
      /* This is technically syntactically correct, though semantically is full of issues */
      r = 1 + (true == (1 != "hi"))
      /* Testing scopes as well... */
    {
        x = "abc"
          y = "e"
          p = 1 + true
          w = "qrstuvwxyz"
          /* How 'bout another scope? */
          {
              x = 1 + 2 + 3
              y = 6 + 7
              p = 1 
      
              /* Tricky, but syntactically valid */
              o = 9 + (false != ("a" == "a"))
              w = 4 + 5 + 0
          }
      }
      
      a = 1
    b = 1 + 2
    a = "qrstuvwxyz"
      d = "fghijklm"
      e = "abc"
      f = "z"
      d = 5 + 6 + 7
      e = 7 + 8
      /* Has your computer blown up yet? */
      {
          /* Some easy tests now */
        z = "abcdefghijklmnopqrstuvwxyz"
          z = 1 + 2 + 3 + 4 + 5 + 6 + 7 + 9
          z = (true == (false == ("a" != "b")))
      }
  }$
/* Here's a bunch of print statements */
  {
    print("i")
      print("think")
      
      {
        print("i")
        print("can")
          
          print("i")
        print("think")
          print("i")
          
          {
        print("can")       
          }
      }
      
    print("i")
    print("think")
      print("")
      print("i")
      print("")
      print("can")
  }$
/* Here's a bunch of while loops, should create a AST...
  whether it's valid or not is a different story... */
  {
    while true {
      while true {
            print("hello world")
      }
          while true {
            print("hello world")
              
              while (1 != 3) {
              print("hello world")
              }
      }
          
          while (1 != 3) {
            print("hello world")
      }
    }
  }
  $
/* Here's a bunch of If statements, should create a AST...
  whether it's valid or not is a different story... */
  {
      if true {
          if true {
              print("hello world")
              if true {
                  print("hello world")
              }
          }
          if (1 != 3) {
              print("hello world")
              
              if true {
                  print("hello world")
              }
              if (1 != 3) {
                  print("hello world")
              }
          }
          
          if (1 != 3) {
              print("hello world")
          }
          if true {
              print("hello world")
          }
      }
  }
  $
/*
  Scope tree test.
      (Scope)
      * a | Type: int Used: true, Line: 4, Pos:5
      * d | Type: int Used: false, Line: 7, Pos:5
      * z | Type: int Used: true, Line: 9, Pos:5
      - (Scope)
      -- [Scope]
      - (Scope)
      -- (Scope)
      --- [Scope]
      **** b | Type: int Used: false, Line: 5, Pos:8
      - [Scope]
      ** c | Type: int Used: false, Line: 6, Pos:6
      - (Scope)
      ** e | Type: int Used: false, Line: 8, Pos:6
      -- [Scope]
      *** f | Type: int Used: false, Line: 8, Pos:13
      - [Scope]
  */
  {
      {
          {
          }
      }
      
      int a
      
      {
          {
              {
                  int b
              }
          }
      }
      {
          int c
      }
      int d
      {
          int e 
          {
              int f
          }
      }
      int z
      {
          z = 3 
          a = 3
      }
  }$
  {
      /* Juice Compiler's boolean hell, who they credit "TIEN" for */
      int a
      a = 0
      boolean b
      b = false
      boolean c
      c = true
      while(((a!=9) == ("test" != "alan")) == ((5==5) != (b == c))) {
          print("a")
          string d
          d = "yes"
          print(d)
          {
              int a
              a = 5
          }
      }
  }$
